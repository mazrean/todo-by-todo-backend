// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todos.sql

package db

import (
	"context"
	"database/sql"
)

const CreateTodo = `-- name: CreateTodo :execresult
INSERT INTO todos (user_id, title, description, completed) VALUES (?, ?, ?, ?)
`

type CreateTodoParams struct {
	UserID      int64          `json:"user_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Completed   sql.NullBool   `json:"completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, CreateTodo,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Completed,
	)
}

const DeleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, DeleteTodo, id)
	return err
}

const GetTodo = `-- name: GetTodo :one
SELECT id, user_id, title, description, completed, created_at, updated_at FROM todos WHERE id = ?
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, GetTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListTodos = `-- name: ListTodos :many
SELECT id, user_id, title, description, completed, created_at, updated_at 
FROM todos 
ORDER BY created_at DESC
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, ListTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTodosByUser = `-- name: ListTodosByUser :many
SELECT id, user_id, title, description, completed, created_at, updated_at 
FROM todos 
WHERE user_id = ? 
ORDER BY created_at DESC
`

func (q *Queries) ListTodosByUser(ctx context.Context, userID int64) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, ListTodosByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const MarkTodoCompleted = `-- name: MarkTodoCompleted :exec
UPDATE todos SET completed = TRUE, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) MarkTodoCompleted(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, MarkTodoCompleted, id)
	return err
}

const MarkTodoIncomplete = `-- name: MarkTodoIncomplete :exec
UPDATE todos SET completed = FALSE, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) MarkTodoIncomplete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, MarkTodoIncomplete, id)
	return err
}

const UpdateTodo = `-- name: UpdateTodo :exec
UPDATE todos 
SET title = ?, description = ?, completed = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ?
`

type UpdateTodoParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Completed   sql.NullBool   `json:"completed"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, UpdateTodo,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.ID,
	)
	return err
}
